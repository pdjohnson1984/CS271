Microsoft (R) Macro Assembler Version 14.11.25508.2	    12/03/17 16:46:24
": Program #6A     (Program06A.asm			     Page 1 - 1


				;***************************************************************
					TITLE: Program #6A     (Program06A.asm)
				;***************************************************************
				; Author / Email: Marc Tibbs (tibbsm@oregonstate.edu)
				; Class / Project ID: CS271-400 / Program #6                
				; Due Date: 12/3/2017
				; Description:	This program takes (and verifies) 10 unsigned numbers from the user
				;				and prints the list of numbers, their sum and average.
				;***************************************************************


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = FFFFFFFF			HI = 4294967295  						; user entry upper limit
 = 00000000			LO = 0									; user entry lower limit
 = 0000000A			MAX = 10								; number of integers the program will accept rom user
 = 00000020			MAXSIZE = 32							; 32-bit/DWORD


				;***************************************************************
				; displayString Macro
				;***************************************************************
				;displayString prints a string stored in a specified memory location.

				displayString	MACRO stringOut
					push	edx
					mov		edx, stringOut
					call	WriteString
					pop		edx
				ENDM
				;***************************************************************


				;***************************************************************
				; getString Macro
				;***************************************************************
				;getString displays a prompt, then get the user’s keyboard input 
				;into a memory location

				getString	MACRO prompt, stringIn
					push	edx
					push	ecx
					displayString prompt
					mov		edx, stringIn
					mov		ecx, MAXSIZE - 1 
					call	ReadString
					mov		[stringIn], edx
					pop		ecx
					pop		edx
				ENDM
				;***************************************************************




 00000000			.data



				;***************************************************************
 00000000 44 65 73 69 67	progTitle	BYTE	"Designing low-level I/O proceduress (CS271-400 Program Assignment #6) ", 0
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 73
	   20 28 43 53 32
	   37 31 2D 34 30
	   30 20 50 72 6F
	   67 72 61 6D 20
	   41 73 73 69 67
	   6E 6D 65 6E 74
	   20 23 36 29 20
	   00
 00000047 50 72 6F 67 72	studentInfo	BYTE	"Programmed by: Marc Tibbs (tibbsm@oregonstate.edu) ", 0
	   61 6D 6D 65 64
	   20 62 79 3A 20
	   4D 61 72 63 20
	   54 69 62 62 73
	   20 28 74 69 62
	   62 73 6D 40 6F
	   72 65 67 6F 6E
	   73 74 61 74 65
	   2E 65 64 75 29
	   20 00
 0000007B 49 6E 73 74 72	progInst_1	BYTE	"Instructions: Please provide 10 unsigned decimal integers.", 0 
	   75 63 74 69 6F
	   6E 73 3A 20 50
	   6C 65 61 73 65
	   20 70 72 6F 76
	   69 64 65 20 31
	   30 20 75 6E 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 00
 000000B6 45 61 63 68 20	progInst_2	BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ", 0 
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   00
 000000FD 41 66 74 65 72	progInst_3	BYTE	"After you have finished inputting the numbers I will display a list of", \
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 2E 00
									"the integers, their sum, and their average.", 0 
 0000016F 50 6C 65 61 73	progInst_4	BYTE	"Please enter an unsigned number: ", 0 
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 75 6E 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000191 45 52 52 4F 52	progInst_5	BYTE	"ERROR: You did not enter an unsigned number or your number was too big. ", 0 
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 75 6E
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 6F
	   72 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 74 6F
	   6F 20 62 69 67
	   2E 20 00
 000001DA  00000020 [		stringIn	BYTE	MAXSIZE DUP (?)
	    00
	   ]
 000001FA 00000000		numOut		DWORD	?
 000001FE 00000000		numIn		DWORD	?
 00000202  00000020 [		stringOut	BYTE	MAXSIZE DUP (?)
	    00
	   ]
 00000222  0000000A [		array		DWORD	MAX DUP(?)
	    00000000
	   ]
 0000024A 59 6F 75 20 65	dspList		BYTE	"You entered the following numbers: ", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 0000026E 54 68 65 20 73	sumTitle	BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000028C 54 68 65 20 61	avgTitle	BYTE	"The average is: ", 0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000029D 00000000		sum			DWORD	?
 000002A1 00000000		average		DWORD	?
 000002A5 47 6F 6F 64 62	goodbye		BYTE	"Goodbye!",0
	   79 65 21 00
				;***************************************************************



 00000000			.code



				;***************************************************************
				;Main Procedure
				;***************************************************************
 00000000			main PROC

				;introduce the program 
 00000000  68 000000FD R		push	OFFSET progInst_3				
 00000005  68 000000B6 R		push	OFFSET progInst_2				
 0000000A  68 0000007B R		push	OFFSET progInst_1				
 0000000F  68 00000047 R		push	OFFSET studentInfo				
 00000014  68 00000000 R		push	OFFSET progTitle				
 00000019  E8 00000066			call	introduction		
					
				;get user data stored into an array
 0000001E  68 00000222 R		push	OFFSET array		
 00000023  68 0000016F R		push	OFFSET progInst_4			
 00000028  68 00000191 R		push	OFFSET progInst_5			
 0000002D  68 000001FA R		push	OFFSET numOut
 00000032  68 000001DA R		push	OFFSET stringIn	
 00000037  E8 00000175			call	getData

				;calculate the sum and average
 0000003C  68 0000029D R		push	OFFSET sum
 00000041  68 000002A1 R		push	OFFSET average
 00000046  68 00000222 R		push	OFFSET array
 0000004B  E8 0000021C			call	calculate

				;display the results
 00000050  68 000002A5 R		push	OFFSET goodbye
 00000055  68 0000024A R		push	OFFSET dspList
 0000005A  68 000002A1 R		push	OFFSET average
 0000005F  68 0000029D R		push	OFFSET sum
 00000064  68 0000026E R		push	OFFSET sumTitle
 00000069  68 0000028C R		push	OFFSET avgTitle
 0000006E  68 00000222 R		push	OFFSET array
 00000073  68 00000202 R		push	OFFSET stringOut
 00000078  E8 00000160			call	displayResults

					exit								; exit to operating system
 0000007D  6A 00	   *	    push   +000000000h
 0000007F  E8 00000000 E   *	    call   ExitProcess
 00000084			main ENDP
				;***************************************************************


				;***************************************************************
				;introduction Procedure
				;*************INTRODUCTION**************************************
				;Procedure to introduce the program.
				;receives: program title, description, instructions by reference
				;			student info also passed by reference
				;returns: none
				;preconditionals: none
				;registers changed: ebp, esp
				;***************************************************************
 00000084			introduction PROC

				;Setup Stack Frame
 00000084  55				push	ebp
 00000085  8B EC			mov		ebp, esp

				;Print progTitle
					displayString [ebp+8]
 00000087  52		     1		push	edx
 00000088  8B 55 08	     1		mov		edx, [ebp+8]
 0000008B  E8 00000000 E     1		call	WriteString
 00000090  5A		     1		pop		edx
 00000091  E8 00000000 E		call	CrLf

				;Print studentInfo 
					displayString [ebp+12]
 00000096  52		     1		push	edx
 00000097  8B 55 0C	     1		mov		edx, [ebp+12]
 0000009A  E8 00000000 E     1		call	WriteString
 0000009F  5A		     1		pop		edx
 000000A0  E8 00000000 E		call	CrLf
 000000A5  E8 00000000 E		call	CrLf

				;Program Instructions
					displayString [ebp+16]				;progInst_1 
 000000AA  52		     1		push	edx
 000000AB  8B 55 10	     1		mov		edx, [ebp+16]
 000000AE  E8 00000000 E     1		call	WriteString
 000000B3  5A		     1		pop		edx
 000000B4  E8 00000000 E		call	CrLf
					displayString [ebp+20]				;progInst_2 
 000000B9  52		     1		push	edx
 000000BA  8B 55 14	     1		mov		edx, [ebp+20]
 000000BD  E8 00000000 E     1		call	WriteString
 000000C2  5A		     1		pop		edx
 000000C3  E8 00000000 E		call	CrLf	
					displayString [ebp+24]				;progInst_3 
 000000C8  52		     1		push	edx
 000000C9  8B 55 18	     1		mov		edx, [ebp+24]
 000000CC  E8 00000000 E     1		call	WriteString
 000000D1  5A		     1		pop		edx
 000000D2  E8 00000000 E		call	CrLf
 000000D7  E8 00000000 E		call	CrLf

				;Restore stack
 000000DC  5D				pop		ebp

 000000DD  C2 0014			ret		20
 000000E0			introduction ENDP
				;***************************************************************



				;***************************************************************
				; readVal Procedure
				;***************************************************************
				;Procedure invokes the getString macro to get the user’s string 
				;of digits. It then converts the digit string to numeric, while 
				;validating the user’s input.
				;receives:	- address of stringIn parameter on the stack 
				;			- address of numOut paramter on the stack 
				;			- addresses of progInst 4 & 5 on the stack 
				;returns: numeric value of string input
				;preconditionals: none
				;registers changed: eax, ebx, ecx, edx, ebp, esp, esi
				; ***************************************************************
 000000E0			readVal PROC

				;Setup Stack Frame
 000000E0  55				push	ebp
 000000E1  8B EC			mov		ebp, esp

				;Save registers
 000000E3  60				pushad

				;Initial jump ahead to skip the invalid data entry message
 000000E4  EB 14			jmp		getNum

				;Instructions for invalid data entries
 000000E6			tryAgain:
					displayString [ebp+16]				;print prog_5 instruction (Error)
 000000E6  52		     1		push	edx
 000000E7  8B 55 10	     1		mov		edx, [ebp+16]
 000000EA  E8 00000000 E     1		call	WriteString
 000000EF  5A		     1		pop		edx
 000000F0  E8 00000000 E		call	CrLf	
 000000F5  E8 00000000 E		call	CrLf

				;Prompt user for input
 000000FA			getNum:
					
					getString [ebp+20], [ebp+8]			;print prog_4 and get user input
 000000FA  52		     1		push	edx
 000000FB  51		     1		push	ecx
 000000FC  52		     2		push	edx
 000000FD  8B 55 14	     2		mov		edx, [ebp+20]
 00000100  E8 00000000 E     2		call	WriteString
 00000105  5A		     2		pop		edx
 00000106  8B 55 08	     1		mov		edx, [ebp+8]
 00000109  B9 0000001F	     1		mov		ecx, MAXSIZE - 1 
 0000010E  E8 00000000 E     1		call	ReadString
 00000113  89 55 08	     1		mov		[[ebp+8]], edx
 00000116  59		     1		pop		ecx
 00000117  5A		     1		pop		edx
 00000118  E8 00000000 E		call	CrLf

 0000011D  BA 00000000			mov		edx, 0						;initialize numeric value
 00000122  BB 0000000A			mov		ebx, 10						;multiplier for each digit
 00000127  8B C8			mov		ecx, eax					;length of user input
 00000129  8B 75 08			mov		esi, [ebp+8]				;user input
 0000012C  FC				cld									;clear direction flag

 0000012D			converter:
 0000012D  AC				lodsb								;load string byte

 0000012E  3C 30			cmp		al, 48						;'0' is char 48
 00000130  72 B4			jb		tryAgain
 00000132  3C 39			cmp		al, 57						;'9' is char 57
 00000134  77 B0			ja		tryAgain

 00000136  2C 30			sub		al, 48						;adjust ASCII
 00000138  0F B6 F8			movzx	edi, al	

 0000013B  8B C2			mov		eax, edx					;numeric value in eax
 0000013D  F7 E3			mul		ebx							;multiply by 10
 0000013F  03 C7			add		eax, edi					;add last digit to the numeric value
 00000141  8B D0			mov		edx, eax					;save new num into edx

 00000143  E2 E8			loop	converter

				;Validate that the user input is in range
 00000145  83 FA FF			cmp		edx, HI						
 00000148  77 9C			ja		tryAgain
 0000014A  83 FA 00			cmp		edx, LO						
 0000014D  72 97			jb		tryAgain

				;Store user input at address (numOut)	
 0000014F  8B 45 0C			mov		eax, [ebp+12]				
 00000152  89 10			mov		[eax], edx

				;Restore registers
 00000154  61				popad

				;Restore stack
 00000155  5D				pop		ebp

				;Return and remove 16 bytes from stack
 00000156  C2 0010			ret		16
 00000159			readVal ENDP
				;***************************************************************



				;***************************************************************
				; writeVal Procedure										   
				;***************************************************************
				;description: converts a numeric value to a string of digits, 
				;and invoke the displayString macro to produce the output.
				;receives:	-the address of stringOut parameter on the stack
				;			-the address of array parameter on the stack
				;returns: string with numeric value
				;preconditionals: none
				;registers changed: eax, ebx, ecx, edx, ebp, esp, esi, edi
				;***************************************************************
 00000159			writeVal PROC

				;Setup Stack Frame
 00000159  55				push	ebp
 0000015A  8B EC			mov		ebp, esp

				;Save registers
 0000015C  60				pushad

				;get address in esi
 0000015D  8B 75 08			mov		esi, [ebp+8]

				;initialize counter in ecx
 00000160  B9 00000000			mov		ecx, 0			

				;get value @ esi in eax
 00000165  8B 06			mov		eax, [esi]	
 00000167  99				cdq

				;get 10 in ebx
 00000168  BB 0000000A			mov		ebx, 10

				;get the length of the string/number
 0000016D			stringLength:


 0000016D  BA 00000000			mov		edx, 0						;clear edx

 00000172  F7 F3			div		ebx							;divide numeric val. by 10
 00000174  99				cdq

 00000175  41				inc		ecx							;increment counter

 00000176  83 F8 00			cmp		eax, 0			
 00000179  77 F2			ja		stringLength				;loop until number is 0

				;get value @ esi in eax
 0000017B  8B 06			mov		eax, [esi]					;move numeric value in eax
 0000017D  99				cdq

 0000017E  8B 7D 0C			mov		edi, [ebp+12]				;move @ of stringOut in edi
 00000181  49				dec		ecx							;decrement the str. len. counter
 00000182  03 F9			add		edi, ecx					;address of last digit in edi

 00000184			toString:
 00000184  BA 00000000			mov		edx, 0						;clear edx
					
 00000189  F7 F3			div		ebx							;divide num. val. by 10

 0000018B  8B C8			mov		ecx, eax					;move dividend in ecx

 0000018D  8B C2			mov		eax, edx					;move remainder in eax

 0000018F  04 30			add		al, 48						;ASCII adjust

 00000191  FD				std									;direction = reverse
 00000192  AA				stosb								;store EAX into [EDI] (stringOut)
					
 00000193  8B C1			mov		eax, ecx					;move dividend back in EAX 
 00000195  99				cdq
 00000196  83 F8 00			cmp		eax, 0						;jump back if above 0
 00000199  77 E9			ja		toString						

					displayString [ebp+12]				;print final string 
 0000019B  52		     1		push	edx
 0000019C  8B 55 0C	     1		mov		edx, [ebp+12]
 0000019F  E8 00000000 E     1		call	WriteString
 000001A4  5A		     1		pop		edx

 000001A5  B8 00000000			mov		eax, 0
 000001AA  89 07			mov		[edi], eax					;clear stringOut

				;Restore registers
 000001AC  61				popad

				;Restore stack
 000001AD  5D				pop		ebp

				;Return and remove 8 bytes from stack
 000001AE  C2 0008			ret		8

 000001B1			writeVal ENDP
				;***************************************************************

				;***************************************************************
				; getData Procedure										   
				;***************************************************************
				;description: converts a numeric value to a string of digits, 
				;and invoke the displayString macro to produce the output.
				;receives:	- the address of the array parameter on the stack
				;			- the address of progInst 4 & 5 on the stack
				;			- the address of numOut on the stack
				;			- the address of stringIn on the stack
				;returns: none
				;preconditionals: none 
				;registers changed: eax, ebx, edi, ebp, esp 
				;***************************************************************
 000001B1			getData PROC

				;Setup Stack Frame
 000001B1  55				push	ebp
 000001B2  8B EC			mov		ebp, esp

 000001B4  B9 0000000A			mov		ecx, MAX
 000001B9  8B 7D 18			mov		edi, [ebp+24]				;OFFSET array

 000001BC			mainLoop:

				;get user input(parameters passed by reference)		
 000001BC  FF 75 14			push	[ebp+20]					;OFFSET progInst_4			
 000001BF  FF 75 10			push	[ebp+16]					;OFFSET progInst_5			
 000001C2  FF 75 0C			push	[ebp+12]					;OFFSET numOut
 000001C5  FF 75 08			push	[ebp+8]						;OFFSET stringIn				
 000001C8  E8 FFFFFF13			call	readVal	

				;store user input in array

 000001CD  8B 5D 0C			mov		ebx, [ebp+12]				;@ of numOut in ebx
 000001D0  8B 03			mov		eax, [ebx]					;numOut value in eax
 000001D2  89 07			mov		[edi], eax					;move num. val. in array
 000001D4  83 C7 04			add		edi, 4						;inc. to next spot in array	
 000001D7  E2 E3			loop	mainLoop

				;Restore stack
 000001D9  5D				pop		ebp

				;Return and remove 20 bytes from stack
 000001DA  C2 0014			ret 20

 000001DD			getData ENDP

				;***************************************************************
				; displayResults Procedure										   
				;***************************************************************
				;description: displays the list of numbers, their average and 
				; their sum.
				;receives:	- the address of goodbye parameter on the stack
				;			- the address of dspList parameter on the stack
				;			- a copy of the average paramter on the stack
				;			- a copy of the sum parameter on the stack
				;			- the address of the sumTitle parameter on the stack
				;			- the address of the avgTitle parameter on the satck
				;			- the address of the array parameter on the stack
				;			- the address of the stringOut parameter on the stack
				;returns: none
				;preconditionals: none 
				;registers changed: eax, ecx, edi, esp, ebp
				;***************************************************************
 000001DD			displayResults PROC

				;Setup Stack Frame
 000001DD  55				push	ebp
 000001DE  8B EC			mov		ebp, esp

					displayString [ebp+32]				;print dspList
 000001E0  52		     1		push	edx
 000001E1  8B 55 20	     1		mov		edx, [ebp+32]
 000001E4  E8 00000000 E     1		call	WriteString
 000001E9  5A		     1		pop		edx
 000001EA  E8 00000000 E		call	CrLf

 000001EF  B9 0000000A			mov		ecx, MAX					
 000001F4  8B 7D 0C			mov		edi, [ebp+12]				;OFFSET array in edi
					
 000001F7			printLoop:

 000001F7  FF 75 08			push	[ebp+8]						;OFFSET stringOut
 000001FA  57				push	edi							;OFFSET array
 000001FB  E8 FFFFFF59			call	writeVal

				;put a comma and space after each number except last 
 00000200  83 F9 01			cmp		ecx, 1
 00000203  74 11			je		noComma
					
 00000205  B0 2C			mov		al, 44						;',' in al
 00000207  E8 00000000 E		call	writechar
 0000020C  B0 20			mov		al, 32						;' ' in al
 0000020E  E8 00000000 E		call	writechar
					
 00000213  83 C7 04			add		edi, 4						;go to next in array

 00000216			noComma:
 00000216  E2 DF			loop	printLoop

 00000218  E8 00000000 E		call	CrLf

					displayString [ebp+20]				;print sumTitle
 0000021D  52		     1		push	edx
 0000021E  8B 55 14	     1		mov		edx, [ebp+20]
 00000221  E8 00000000 E     1		call	WriteString
 00000226  5A		     1		pop		edx
 00000227  8B 5D 18			mov		ebx, [ebp+24]				;@sum into ebx
 0000022A  8B 03			mov		eax, [ebx]					;sum into eax
 0000022C  E8 00000000 E		call	writeDec					;print sum
 00000231  E8 00000000 E		call	CrLf

					displayString [ebp+16]				;print avgTitle
 00000236  52		     1		push	edx
 00000237  8B 55 10	     1		mov		edx, [ebp+16]
 0000023A  E8 00000000 E     1		call	WriteString
 0000023F  5A		     1		pop		edx
 00000240  8B 5D 1C			mov		ebx, [ebp+28]				;@average in ebx
 00000243  8B 03			mov		eax, [ebx]					;average in eac
 00000245  E8 00000000 E		call	writeDec					;print average
 0000024A  E8 00000000 E		call	CrLf
 0000024F  E8 00000000 E		call	CrLf

					displayString [ebp+36]				;print goodbye
 00000254  52		     1		push	edx
 00000255  8B 55 24	     1		mov		edx, [ebp+36]
 00000258  E8 00000000 E     1		call	WriteString
 0000025D  5A		     1		pop		edx
 0000025E  E8 00000000 E		call	CrLf
 00000263  E8 00000000 E		call	CrLf

				;Restore stack
 00000268  5D				pop		ebp

				;Return and remove 32 bytes from stack
 00000269  C2 0020			ret 32

 0000026C			displayResults ENDP


				;***************************************************************
				; calculate Procedure										   
				;***************************************************************
				;description: calculates the sum and average of the numbers in 
				; the passed array
				;receives:	- the address of the sum parameter on the stack
				;			- the address of the average parameter on the stack
				;			- the address of the array paramter on the stack
				;returns: the value of the sum and average of the array numbers
				;preconditionals: a filled array 
				;registers changed: eax, ebc, ecx, edi, esp, ebp
				;***************************************************************
 0000026C			calculate PROC

				;Setup Stack Frame
 0000026C  55				push	ebp
 0000026D  8B EC			mov		ebp, esp

 0000026F  8B 7D 08			mov		edi, [ebp+8]				;@ of array in edi
 00000272  B8 00000000			mov		eax, 0						;initialize sum
 00000277  B9 0000000A			mov		ecx, MAX					;array counter in ecx

 0000027C			calcSum:
 0000027C  8B 1F			mov		ebx, [edi]					;array value in ebx
 0000027E  03 C3			add		eax, ebx					;add to sum
 00000280  83 C7 04			add		edi, 4						;next value in array
 00000283  E2 F7			loop	calcSum

					
 00000285  8B 5D 10			mov		ebx, [ebp+16]				;OFFSET sum into ebx
 00000288  89 03			mov		[ebx], eax					;eax (total sum) into [ebx] (sum)

					
 0000028A  BB 0000000A			mov		ebx, MAX					;number of items in array
 0000028F  99				cdq		
 00000290  BA 00000000			mov		edx, 0						;clear edx

 00000295  F7 F3			div		ebx							;sum / array size

 00000297  8B 5D 0C			mov		ebx, [ebp+12]				;OFFSET average into ebx
 0000029A  89 03			mov		[ebx], eax					;eax into [ebx] (average)

				;Restore stack
 0000029C  5D				pop		ebp

				;Return and remove 12 bytes from stack
 0000029D  C2 000C			ret 12

 000002A0			calculate ENDP

				END main
Microsoft (R) Macro Assembler Version 14.11.25508.2	    12/03/17 16:46:24
": Program #6A     (Program06A.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002AE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculate  . . . . . . . . . . .	P Near	 0000026C _TEXT	Length= 00000034 Public STDCALL
  calcSum  . . . . . . . . . . .	L Near	 0000027C _TEXT	
displayResults . . . . . . . . .	P Near	 000001DD _TEXT	Length= 0000008F Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 000001F7 _TEXT	
  noComma  . . . . . . . . . . .	L Near	 00000216 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000001B1 _TEXT	Length= 0000002C Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 000001BC _TEXT	
introduction . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 0000005C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000084 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000E0 _TEXT	Length= 00000079 Public STDCALL
  tryAgain . . . . . . . . . . .	L Near	 000000E6 _TEXT	
  getNum . . . . . . . . . . . .	L Near	 000000FA _TEXT	
  converter  . . . . . . . . . .	L Near	 0000012D _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000159 _TEXT	Length= 00000058 Public STDCALL
  stringLength . . . . . . . . .	L Near	 0000016D _TEXT	
  toString . . . . . . . . . . .	L Near	 00000184 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 FFFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000000h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000020h   
MAX  . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000222 _DATA	
average  . . . . . . . . . . . .	DWord	 000002A1 _DATA	
avgTitle . . . . . . . . . . . .	Byte	 0000028C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dspList  . . . . . . . . . . . .	Byte	 0000024A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000002A5 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numIn  . . . . . . . . . . . . .	DWord	 000001FE _DATA	
numOut . . . . . . . . . . . . .	DWord	 000001FA _DATA	
progInst_1 . . . . . . . . . . .	Byte	 0000007B _DATA	
progInst_2 . . . . . . . . . . .	Byte	 000000B6 _DATA	
progInst_3 . . . . . . . . . . .	Byte	 000000FD _DATA	
progInst_4 . . . . . . . . . . .	Byte	 0000016F _DATA	
progInst_5 . . . . . . . . . . .	Byte	 00000191 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringIn . . . . . . . . . . . .	Byte	 000001DA _DATA	
stringOut  . . . . . . . . . . .	Byte	 00000202 _DATA	
studentInfo  . . . . . . . . . .	Byte	 00000047 _DATA	
sumTitle . . . . . . . . . . . .	Byte	 0000026E _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000029D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
